{"ast":null,"code":"import { toast } from 'react-toastify';\nimport axios from 'axios';\nconst base_url = \"http://aimachinelab.com:3001\";\nvar helper = {\n  toaster: async (message, type = \"error\") => {\n    if (type === \"error\") {\n      console.log(type);\n      toast.error(message);\n    } else {\n      toast.success(message);\n    }\n  },\n  post: async (jsonObj = {}, path = \"\", Auth = \"\") => {\n    console.log('helper is listening', path); //const url=process.env.REACT_APP_API_BASE_URL;\n    //console.log(url);\n\n    const res = fetch(base_url + path, {\n      method: \"POST\",\n      body: JSON.stringify(jsonObj),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return {\n      response: await res,\n      status: await res.status\n    };\n  },\n  get: async (jsonObj = {}, path = \"\") => {\n    const url = base_url + path;\n    const res = fetch(url, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return {\n      response: await res,\n      status: await res.status\n    };\n  },\n  axios_get: async (jsonObj = {}, path = \"\") => {\n    try {\n      let query = await helper.serialize(jsonObj);\n      const url = base_url + path + '?' + query;\n      const res = await axios(url, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      return res;\n    } catch (error) {\n      console.log(error);\n    }\n  },\n  axios_post: async (jsonObj, path = '') => {\n    try {\n      const url = base_url + path;\n      const res = await axios(url, {\n        method: 'POST',\n        body: JSON.stringify(jsonObj),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      return res;\n    } catch (error) {\n      console.log('error');\n    }\n  },\n  post_formdata: async (formData = {}, path = \"\") => {\n    const url = base_url + path;\n    const res = await fetch(url, {\n      method: \"POST\",\n      body: formData,\n      headers: {}\n    });\n    return {\n      response: await res,\n      status: await res.status\n    };\n  },\n  serialize: function (obj, prefix) {\n    var str = [],\n        p;\n\n    for (p in obj) {\n      if (obj.hasOwnProperty(p)) {\n        var k = prefix ? prefix + \"[\" + p + \"]\" : p,\n            v = obj[p];\n        str.push(v !== null && typeof v === \"object\" ? this.serialize(v, k) : encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\n      } else {}\n    }\n\n    return str.join(\"&\");\n  }\n};\nexport default helper;","map":{"version":3,"sources":["/media/vaseem/62A4C6B9A4C68ECB/projects/selecta/selecta/admin/src/common/helpers/Helper.js"],"names":["toast","axios","base_url","helper","toaster","message","type","console","log","error","success","post","jsonObj","path","Auth","res","fetch","method","body","JSON","stringify","headers","response","status","get","url","axios_get","query","serialize","axios_post","post_formdata","formData","obj","prefix","str","p","hasOwnProperty","k","v","push","encodeURIComponent","join"],"mappings":"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","sourcesContent":["import { toast } from 'react-toastify';\r\nimport axios from 'axios';\r\n\r\nconst base_url = \"http://aimachinelab.com:3001\";\r\n\r\nvar helper = {\r\n    toaster: async (message, type=\"error\" ,) => {\r\n        if(type===\"error\") {\r\n            console.log(type);\r\n            toast.error(message);\r\n        } else {\r\n            toast.success(message);\r\n        }\r\n    },\r\n\r\n    post: async (jsonObj = {}, path = \"\", Auth=\"\" ) => {\r\n        console.log('helper is listening', path);\r\n        //const url=process.env.REACT_APP_API_BASE_URL;\r\n        //console.log(url);\r\n        const res = fetch(base_url+path, {\r\n            method: \"POST\",\r\n            body: JSON.stringify(jsonObj),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n\r\n        return { response: await res, status: await res.status };\r\n    },\r\n\r\n\r\n\r\n    get: async (jsonObj = {}, path=\"\") => { \r\n\r\n        const url = base_url + path;  \r\n        const res = fetch(url, {\r\n            method: 'GET',\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        return { response: await res, status: await res.status };\r\n\r\n    },\r\n\r\n    axios_get: async (jsonObj = {}, path = \"\") => {\r\n        try{\r\n            \r\n            let query = await helper.serialize(jsonObj);\r\n            const url = base_url + path + '?'+query;\r\n            const res = await axios(url, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n            return res;\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    },\r\n\r\n\r\n\r\n    axios_post: async(jsonObj, path='') => {\r\n        try{\r\n            const url = base_url + path;\r\n            const res = await axios(url,  {\r\n                method: 'POST',\r\n                body:JSON.stringify(jsonObj),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n            return res;\r\n        }catch(error) {\r\n            console.log('error');\r\n        }\r\n    },\r\n\r\n    post_formdata: async (formData = {}, path = \"\") => {\r\n        const url = base_url + path;\r\n        const res = await fetch(url, {\r\n            method: \"POST\", \r\n            body: formData,\r\n            headers: {\r\n                \r\n            }\r\n        });\r\n        return { response: await res, status: await res.status };\r\n    },\r\n    \r\n\r\n\r\n    serialize: function(obj, prefix) {\r\n        var str=[],\r\n            p;\r\n        for (p in obj) {\r\n            if(obj.hasOwnProperty(p)) {\r\n                var k = prefix ? prefix + \"[\" + p + \"]\" : p,\r\n                    v = obj[p];\r\n                str.push((v !== null && typeof v === \"object\") ?\r\n                    this.serialize(v, k) :\r\n                    encodeURIComponent(k) + \"=\" + encodeURIComponent(v));\r\n            } else {\r\n            }\r\n        }\r\n        return str.join(\"&\");\r\n    },\r\n\r\n}\r\n\r\nexport default helper;"]},"metadata":{},"sourceType":"module"}