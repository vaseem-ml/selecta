{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/media/vaseem/62A4C6B9A4C68ECB/projects/selecta/selecta/admin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"./react\");\n\nvar jwt_parse_1 = require(\"./util/jwt-parse\");\n/**\r\n* React hook to handle session from your browser storage\r\n* @param sessionKey This required parameter is used as the browser storage key. This should be a unique string per app. For example your package.json's name value.\r\n* @param keepOnWindowClosed This optional parameter will determine if useSession will work with LocalStorage or SessionStorage. Default value is true, so default storage is LocalStorage\r\n* @returns If there is a session in your browser storage then it will be returned. If there is no session, it will return null.\r\n*/\n\n\nfunction useSession(sessionKey) {\n  var keepOnWindowClosed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (!sessionKey) {\n    throw new Error(\"sessionKey was not provided to useSession hook. Example: useSession('facebook-session')\");\n  }\n\n  var getStorage = function getStorage() {\n    return keepOnWindowClosed ? localStorage : sessionStorage;\n  };\n\n  var getStorageValue = function getStorageValue() {\n    try {\n      var storageValue = getStorage().getItem(sessionKey);\n\n      if (storageValue != null) {\n        // There is a session in the storage already\n        try {\n          var session = JSON.parse(storageValue);\n          return session;\n        } catch (_a) {\n          // Oops... It seems it wasn't an object, returning as String then\n          return storageValue;\n        }\n      }\n    } catch (_b) {\n      // This catch block handles the known issues listed here: https://caniuse.com/#feat=namevalue-storage\n      console.warn(\"useSession could not access the browser storage. Session will be lost when closing browser window\");\n    }\n\n    return null;\n  };\n\n  var _react_1$useState = react_1.useState(getStorageValue),\n      _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n      state = _react_1$useState2[0],\n      setState = _react_1$useState2[1];\n\n  var save = function save(sessionValue) {\n    if (typeof sessionValue == \"object\" || typeof sessionValue === \"string\") {\n      getStorage().setItem(sessionKey, typeof sessionValue == \"object\" ? JSON.stringify(sessionValue) : sessionValue);\n      setState(sessionValue);\n    } else {\n      throw new Error(\"useSession hook only accepts objects or strings as session values\");\n    }\n  };\n\n  var saveJWT = function saveJWT(jwt) {\n    var parsedObject;\n\n    try {\n      parsedObject = jwt_parse_1.default(jwt);\n      parsedObject.token = jwt;\n    } catch (ex) {\n      throw new Error(\"Could not parse provided Json Web Token: \" + ex);\n    }\n\n    save(parsedObject);\n  };\n\n  var clear = function clear() {\n    getStorage().removeItem(sessionKey);\n    setState(null);\n  };\n\n  var syncState = function syncState(event) {\n    if (event.key === sessionKey) {\n      setState(getStorageValue());\n    }\n  };\n\n  react_1.useEffect(function () {\n    window.addEventListener(\"storage\", syncState);\n    return function () {\n      window.removeEventListener(\"storage\", syncState);\n    };\n  }, [sessionKey]);\n  return {\n    session: state,\n    save: save,\n    saveJWT: saveJWT,\n    clear: clear\n  };\n}\n\n;\nexports.default = useSession;","map":{"version":3,"sources":["/media/vaseem/62A4C6B9A4C68ECB/projects/selecta/selecta/admin/node_modules/react-use-session/lib/useSession.js"],"names":["Object","defineProperty","exports","value","react_1","require","jwt_parse_1","useSession","sessionKey","keepOnWindowClosed","Error","getStorage","localStorage","sessionStorage","getStorageValue","storageValue","getItem","session","JSON","parse","_a","_b","console","warn","useState","state","setState","save","sessionValue","setItem","stringify","saveJWT","jwt","parsedObject","default","token","ex","clear","removeItem","syncState","event","key","useEffect","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst react_1 = require(\"./react\");\r\nconst jwt_parse_1 = require(\"./util/jwt-parse\");\r\n/**\r\n* React hook to handle session from your browser storage\r\n* @param sessionKey This required parameter is used as the browser storage key. This should be a unique string per app. For example your package.json's name value.\r\n* @param keepOnWindowClosed This optional parameter will determine if useSession will work with LocalStorage or SessionStorage. Default value is true, so default storage is LocalStorage\r\n* @returns If there is a session in your browser storage then it will be returned. If there is no session, it will return null.\r\n*/\r\nfunction useSession(sessionKey, keepOnWindowClosed = true) {\r\n    if (!sessionKey) {\r\n        throw new Error(\"sessionKey was not provided to useSession hook. Example: useSession('facebook-session')\");\r\n    }\r\n    const getStorage = () => {\r\n        return keepOnWindowClosed ? localStorage : sessionStorage;\r\n    };\r\n    const getStorageValue = () => {\r\n        try {\r\n            const storageValue = getStorage().getItem(sessionKey);\r\n            if (storageValue != null) {\r\n                // There is a session in the storage already\r\n                try {\r\n                    const session = JSON.parse(storageValue);\r\n                    return session;\r\n                }\r\n                catch (_a) {\r\n                    // Oops... It seems it wasn't an object, returning as String then\r\n                    return storageValue;\r\n                }\r\n            }\r\n        }\r\n        catch (_b) {\r\n            // This catch block handles the known issues listed here: https://caniuse.com/#feat=namevalue-storage\r\n            console.warn(\"useSession could not access the browser storage. Session will be lost when closing browser window\");\r\n        }\r\n        return null;\r\n    };\r\n    const [state, setState] = react_1.useState(getStorageValue);\r\n    const save = (sessionValue) => {\r\n        if (typeof sessionValue == \"object\" || typeof sessionValue === \"string\") {\r\n            getStorage().setItem(sessionKey, typeof sessionValue == \"object\" ? JSON.stringify(sessionValue) : sessionValue);\r\n            setState(sessionValue);\r\n        }\r\n        else {\r\n            throw new Error(\"useSession hook only accepts objects or strings as session values\");\r\n        }\r\n    };\r\n    const saveJWT = (jwt) => {\r\n        let parsedObject;\r\n        try {\r\n            parsedObject = jwt_parse_1.default(jwt);\r\n            parsedObject.token = jwt;\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"Could not parse provided Json Web Token: \" + ex);\r\n        }\r\n        save(parsedObject);\r\n    };\r\n    const clear = () => {\r\n        getStorage().removeItem(sessionKey);\r\n        setState(null);\r\n    };\r\n    const syncState = (event) => {\r\n        if (event.key === sessionKey) {\r\n            setState(getStorageValue());\r\n        }\r\n    };\r\n    react_1.useEffect(() => {\r\n        window.addEventListener(\"storage\", syncState);\r\n        return () => {\r\n            window.removeEventListener(\"storage\", syncState);\r\n        };\r\n    }, [sessionKey]);\r\n    return { session: state, save, saveJWT, clear };\r\n}\r\n;\r\nexports.default = useSession;\r\n"]},"metadata":{},"sourceType":"script"}