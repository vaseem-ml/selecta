'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractCodes = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _renderprops = require('react-spring/renderprops');

var _osme = require('osme');

var _osme2 = _interopRequireDefault(_osme);

var _shortestPath = require('./shortestPath');

var _mercator = require('./projections/mercator');

var _gall = require('./projections/gall');

var _geo = require('./projections/geo');

var _albers = require('./projections/albers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var projections = {
  mercator: _mercator.mercator,
  gall: _gall.gall,
  geo: _geo.geo,
  albers: _albers.albers
};

var toPath = function toPath(path, projector, projectionOptions) {
  return 'M' + path.map(function (x) {
    return projector.projection(x, projectionOptions);
  }).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        x = _ref2[0],
        y = _ref2[1];

    return [Math.round(x * 10) / 10, Math.round(y * 10) / 10];
  }).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        x = _ref4[0],
        y = _ref4[1];

    return x + ',' + y;
  }).join(' L');
};
var toPaths = function toPaths(paths, projection, projectionOptions) {
  return (0, _shortestPath.getShortestContour)(paths).map(function (x) {
    return toPath(x, projection, projectionOptions);
  }).join(' z ');
};

var extractCodes = exports.extractCodes = function extractCodes(geometry) {
  return Object.keys(geometry.regions).reduce(function (acc, region) {
    return [].concat(_toConsumableArray(acc), [geometry.regions[region].property.iso3166]);
  }, []);
};

var convert = function convert(features, projection, projectionOptions) {
  return features.map(function (feature, index) {
    return {
      index: index,
      geometry: toPaths(feature.geometry.coordinates, projection, projectionOptions),
      properties: feature.properties,
      code: feature.properties.properties.iso3166
    };
  });
};

var defaultSorter = function defaultSorter(_ref5) {
  var _ref5$data = _ref5.data,
      data = _ref5$data === undefined ? {} : _ref5$data,
      hovered = _ref5.hovered;
  return function (a, b) {
    if (hovered === a.code) {
      return 1;
    }
    if (hovered === b.code) {
      return -1;
    }
    if (data[a.code] && data[b.code] || !data[a.code] && !data[b.code]) {
      return a.index - b.index;
    }
    if (data[a.code]) {
      return 1;
    }
    return -1;
  };
};

var WorldChart = function (_Component) {
  _inherits(WorldChart, _Component);

  function WorldChart() {
    var _ref6;

    var _temp, _this, _ret;

    _classCallCheck(this, WorldChart);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref6 = WorldChart.__proto__ || Object.getPrototypeOf(WorldChart)).call.apply(_ref6, [this].concat(args))), _this), _this.rawVector = convert(_osme2.default.parseData(_this.props.geometry).features, projections[_this.props.projection], _this.props.projectionOptions), _this.vector = null, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(WorldChart, [{
    key: 'renderData',
    value: function renderData() {
      var vector = this.vector;
      var _props = this.props,
          styler = _props.styler,
          _props$data = _props.data,
          data = _props$data === undefined ? {} : _props$data,
          native = _props.native;


      if (native) {
        return vector && vector.map(function (feature) {
          return _react2.default.createElement(_renderprops.animated.path, _extends({
            key: feature.code,
            d: feature.geometry,
            'data-code': feature.code
          }, styler(data[feature.code], feature.code, feature.properties)));
        });
      }

      return vector && vector.map(function (feature) {
        return _react2.default.createElement(
          _renderprops.Spring,
          { key: feature.code, native: true, from: { x: 0 }, to: { x: data[feature.code] || 0 } },
          function (styles) {
            return _react2.default.createElement(_renderprops.animated.path, _extends({
              d: feature.geometry,
              'data-code': feature.code
            }, styler(styles.x, feature.code, feature.properties)));
          }
        );
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          sorter = _props2.sorter,
          projection = _props2.projection,
          viewBox = _props2.viewBox;


      this.vector = this.rawVector.slice().sort((sorter || defaultSorter)(this.props));
      return _react2.default.createElement(
        'svg',
        { viewBox: viewBox || projections[projection].viewBox, className: className },
        this.renderData()
      );
    }
  }]);

  return WorldChart;
}(_react.Component);

WorldChart.propTypes = {
  data: _propTypes2.default.objectOf(_propTypes2.default.number).isRequired,
  className: _propTypes2.default.string,
  styler: _propTypes2.default.func.isRequired,
  sorter: _propTypes2.default.func,
  native: _propTypes2.default.bool,
  hovered: _propTypes2.default.string,
  geometry: _propTypes2.default.any.isRequired,

  projection: _propTypes2.default.oneOf(['mercator', 'gall', 'albers']),
  projectionOptions: _propTypes2.default.any,
  viewBox: _propTypes2.default.string
};
WorldChart.defaultProps = {
  className: '',
  native: false,
  hovered: null,
  projection: 'mercator'
};
exports.default = WorldChart;